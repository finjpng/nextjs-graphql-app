import Head from "next/head";
import Image from "next/image";
import { Fragment, useState } from "react";
import styles from "../styles/Home.module.css";
import {
  ApolloClient,
  InMemoryCache,
  gql,
  useQuery,
  useLazyQuery,
  useMutation,
} from "@apollo/client";
import { GET_ALL_USERS, GET_MOVIES, GET_USER } from "../db/queries";
import Users from "./Users";
import TestPage from "./TestPage";
import Movies from "./Movies";

function Home(props) {
  // const { data, loading, refetch } = useQuery(GET_ALL_USERS);
  const { data, loading, refetch } = useQuery(GET_MOVIES);
  console.log(data?.movies);
  return (
    <Fragment>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.grid}>
        {/* {data?.users?.map((user) => (
          <Users id={user.id} name={user.name} username={user.username} />
        ))} */}
        {data?.movies.map((movie) => (
          <Movies
            id={movie.id}
            name={movie.name}
            image={movie.image}
            release={movie.release}
            director={movie.director}
            synopsis={movie.synopsis}
          />
        ))}
        {/* <Movies movies={data?.movies} /> */}
        {/* cast={movie.cast}
          genre={movie.genre} */}
      </div>
    </Fragment>
  );
}
const client = new ApolloClient({
  uri: "http://localhost:3000/api/graphql",
  cache: new InMemoryCache(),
});
export async function getStaticProps() {
  const { data } = await client.query({
    query: GET_ALL_USERS,
  });

  return {
    props: {
      users: data.users.slice(),
    },
    revalidate: 1,
  };
}

export default Home;

// onClick={() => {
//   fetchId({
//     variables: {
//       id: user.id,
//     },
//   });
// }}

// <div>
// <input
//   type="text"
//   placeholder="Name"
//   onChange={(event) => {
//     setName(event.target.value);
//   }}
// />
// <input
//   type="text"
//   placeholder="Username"
//   onChange={(event) => {
//     setUsername(event.target.value);
//   }}
// />
// <input
//   type="number"
//   placeholder="Age"
//   onChange={(event) => {
//     setAge(event.target.value);
//   }}
// />
// <input
//   type="text"
//   placeholder="Nationality"
//   onChange={(event) => {
//     setNationality(event.target.value.toUpperCase());
//   }}
// />

// <button
//   onClick={() => {
//     createUser({
//       variables: {
//         input: { name, username, age: Number(age), nationality },
//       },
//     });
//     refetch();
//   }}
// >
//   Create User
// </button>
// </div>
// <div>
// {/* {testLang.map((user) => {
//   <h1>{user.name}</h1>;
// })} */}
// {data?.users?.id}
// {data?.users?.map((user, index) => {
//   <TestPage name={user.name} id={user.id} />;
// })}

// {/* {data.map((user) => (
//   <h1>Name: {user.users.name}</h1>
// ))} */}
// </div>
